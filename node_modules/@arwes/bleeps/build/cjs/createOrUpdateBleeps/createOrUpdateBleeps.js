"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.createOrUpdateBleeps = void 0;
const constants_1 = require("../constants");
const index_1 = require("../createBleep/index");
const index_2 = require("../updateBleep/index");
const index_3 = require("../unloadBleep/index");
const index_4 = require("../unloadBleeps/index");
const createOrUpdateBleeps = (providedBleeps, audioSettings, playersSettings, bleepsSettings) => {
    var _a;
    const bleeps = providedBleeps !== null && providedBleeps !== void 0 ? providedBleeps : {};
    if ((_a = audioSettings.common) === null || _a === void 0 ? void 0 : _a.disabled) {
        (0, index_4.unloadBleeps)(bleeps);
        return bleeps;
    }
    Object.keys(bleepsSettings).forEach(bleepName => {
        var _a, _b, _c, _d;
        const bleepSettings = bleepsSettings[bleepName];
        if (!bleepSettings) {
            (0, index_3.unloadBleep)(bleeps, bleepName);
            return;
        }
        const bleepCategory = bleepSettings.category;
        if (process.env.NODE_ENV !== 'production' &&
            bleepCategory !== undefined &&
            !constants_1.BLEEPS_CATEGORIES.includes(bleepCategory)) {
            throw new Error(`Bleep category "${bleepCategory}" is not valid.`);
        }
        const audioCategorySettings = (_a = audioSettings.categories) === null || _a === void 0 ? void 0 : _a[bleepCategory];
        const processedAudioSettings = {
            ...audioSettings.common,
            ...audioCategorySettings
        };
        if (processedAudioSettings.disabled) {
            (0, index_3.unloadBleep)(bleeps, bleepName);
            return;
        }
        const playerSettings = playersSettings[bleepSettings.player];
        if (!playerSettings) {
            throw new Error(`Component bleep requires a provided player. Player "${bleepSettings.player}" was not found.`);
        }
        if (playerSettings.disabled) {
            (0, index_3.unloadBleep)(bleeps, bleepName);
            return;
        }
        // If a bleep has updated `src` or `format` settings, it should be re-created.
        // Otherwise it is updated to be fast and prevent more HTTP requests.
        const hasBleepUpdatedSrc = !!((_b = bleeps[bleepName]) === null || _b === void 0 ? void 0 : _b._settings.src.find((v, i) => v !== playerSettings.src[i]));
        const hasBleepUpdatedFormat = !!((_d = (_c = bleeps[bleepName]) === null || _c === void 0 ? void 0 : _c._settings.format) === null || _d === void 0 ? void 0 : _d.find((v, i) => { var _a; return v !== ((_a = playerSettings.format) === null || _a === void 0 ? void 0 : _a[i]); }));
        if (bleeps[bleepName] && !hasBleepUpdatedSrc && !hasBleepUpdatedFormat) {
            (0, index_2.updateBleep)(bleeps[bleepName], processedAudioSettings, playerSettings);
        }
        else {
            (0, index_3.unloadBleep)(bleeps, bleepName);
            bleeps[bleepName] = (0, index_1.createBleep)(processedAudioSettings, playerSettings);
        }
    });
    return bleeps;
};
exports.createOrUpdateBleeps = createOrUpdateBleeps;
